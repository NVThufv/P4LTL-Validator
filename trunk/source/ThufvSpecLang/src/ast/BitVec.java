/* BitvecLiteral -- Automatically generated by TreeBuilder (2022-06-30T15:29Z) */

package ast;

import java.math.BigInteger;

import de.uni_freiburg.informatik.ultimate.ltl2aut.ast.AstNode;
/**
 * Represents a bitvec literal which is a special form of a expression.
 */
public class BitVec extends BitVecNode {
    /**
     * The value given as String. This representation is used to support
     * arbitrarily large numbers. We do not need to compute with them but
     * give them 1-1 to the decision procedure.
     */
	BigInteger value;

    /**
     * The constructor taking initial values.
     * @param value the value given as BigInteger.
     * @param length the number of bits in this bitvector.
     */
    public BitVec(BigInteger value, int length) {
        this.value = value;
        this.length = length;
    }
    
    /**
     * The constructor taking initial values.
     * @param bvint the string description of bitvector.
     */
    public BitVec(String bitvec) {
		int bvPos = bitvec.indexOf("bv");
		int length = Integer.parseInt(bitvec.substring(bvPos+2));
        this.value = new BigInteger(bitvec.substring(0, bvPos));
        this.length = length;
    }

    
    /**
     * Returns a boogie description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append(value.toString()).append("bv").append(Integer.toString(length));
        return sb.toString();
    }

    /**
     * Gets the value given as String. This representation is used to support
     * arbitrarily large numbers. We do not need to compute with them but
     * give them 1-1 to the decision procedure.
     * @return the value given as BigInteger.
     */
    public BigInteger getValue() {
        return value;
    }

    /**
     * Gets the number of bits in this bitvector.
     * @return the number of bits in this bitvector.
     */
    public int getLength() {
        return length;
    }
}
