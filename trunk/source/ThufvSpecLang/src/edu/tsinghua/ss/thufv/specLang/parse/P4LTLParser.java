
//----------------------------------------------------
// The following code was generated by jh-javacup-1.2 20210807
// Mon Oct 17 12:15:40 CST 2022
//----------------------------------------------------

package edu.tsinghua.ss.thufv.specLang.parse;

import com.github.jhoenicke.javacup.runtime.*;
import de.uni_freiburg.informatik.ultimate.ltl2aut.ast.*;
import ast.*;
import java.util.ArrayList;
import java.math.BigInteger;

/** jh-javacup-1.2 20210807 generated parser.
  * @version Mon Oct 17 12:15:40 CST 2022
  */
public class P4LTLParser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public P4LTLParser() {super();}

  /** Constructor which sets the default scanner. */
  public P4LTLParser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public P4LTLParser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** The static parse table */
  static com.github.jhoenicke.javacup.runtime.ParseTable CUP$parse_table =
    new com.github.jhoenicke.javacup.runtime.ParseTable(new String[] {
    "\124\000\002\001\003\001\003\001\003\001\003" +
    "\001\003\001\003\001\004\001\004\001\004\001" +
    "\002\001\003\001\004\002\001\002\004\002\004" +
    "\002\004\002\006\002\004\002\010\002\003\002" +
    "\003\002\003\002\003\002\003\002\003\002\003" +
    "\002\003\002\003\002\003\002\002\003\004\003" +
    "\004\003\006\003\003\003\003\003\003\003\001" +
    "\003\001\003\001\003\001\004\001\160\u0532\302" +
    "\u052c\300\270\260\u0516\u01de\u0156\u06ac\u0500\u04fa\u04e4" +
    "\u0658\160\u04ce\u04c8\u04b2\u049c\u0496\u0480\u0128\254\u06b2" +
    "\240\372\u03bc\u03ac\224\206\204\202\u027c\u0370\u0662" +
    "\u0654\u0240\u0634\u0690\u0684\u03ee\u0628\u0604\u05f8\u05d4\u05c8" +
    "\u05a4\u054c\u03ec\u0108\u0100\u03a0\374\370\234\340\u0598" +
    "\314\236\160\u022a\u020c\u01fc\u01ee\u01de\u01c0\u01a2\u0192" +
    "\u0184\u0574\u0568\u0544\u0354\u0360\160\202\u010e\200\u010a" +
    "\u0106\356\u0308\u02bc\u0270\u0174\u045c\u0454\u0324\u0314\u0438" +
    "\u042c\u041c\u03fc\214\336\u018c\u010a\u02d8\332\u0156\u0128" +
    "\372\206\u02c8\354\170\350\314\u010a\u028c\340\162" +
    "\u0700\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\160\001\016\002\160\001\112\275" +
    "\073\053\112\277\157\050\151\331\073\055\073" +
    "\057\073\061\115\305\113\301\037\157\036\155" +
    "\035\153\146\223\157\050\157\050\157\050\073" +
    "\063\135\317\034\151\073\065\073\067\073\071" +
    "\073\073\072\053\030\145\073\075\073\077\072" +
    "\055\072\057\072\061\026\143\073\101\005\031" +
    "\073\103\146\175\146\177\004\027\135\175\135" +
    "\177\072\063\003\025\001\021\072\065\072\067" +
    "\072\071\072\073\071\053\153\044\072\075\072" +
    "\077\071\055\071\057\071\061\066\235\072\101" +
    "\066\237\072\103\156\337\153\044\153\044\153" +
    "\044\152\333\071\063\150\327\120\313\071\065" +
    "\071\067\071\071\071\073\031\053\145\046\071" +
    "\075\071\077\031\055\031\057\031\061\117\311" +
    "\071\101\116\307\071\103\114\303\145\046\145" +
    "\046\145\046\142\325\031\063\136\321\067\241" +
    "\031\065\031\067\031\071\031\073\025\053\144" +
    "\040\031\075\031\077\025\055\025\057\025\061" +
    "\065\233\031\101\064\231\031\103\062\227\144" +
    "\040\144\040\144\040\061\225\025\063\140\323" +
    "\154\335\025\065\025\067\025\071\025\073\010" +
    "\053\143\036\025\075\025\077\010\055\010\057" +
    "\010\061\160\001\025\101\160\001\025\103\160" +
    "\001\143\036\143\036\143\036\124\251\010\063" +
    "\160\001\160\001\010\065\010\067\010\071\010" +
    "\073\104\251\160\001\010\075\010\077\160\001" +
    "\137\042\160\001\103\251\010\101\160\001\010" +
    "\103\124\065\124\067\124\071\124\073\102\251" +
    "\137\042\137\042\137\042\104\065\104\067\104" +
    "\071\104\073\124\101\160\001\124\103\103\065" +
    "\103\067\103\071\103\073\101\251\104\101\160" +
    "\001\104\103\102\065\102\067\102\071\102\073" +
    "\103\101\160\001\103\103\160\001\007\035\160" +
    "\001\160\001\100\251\102\101\160\001\102\103" +
    "\101\065\101\067\101\071\101\073\077\251\007" +
    "\037\007\041\007\043\007\045\007\047\007\051" +
    "\076\251\101\101\160\001\101\103\100\065\100" +
    "\067\100\071\100\073\075\251\160\001\160\001" +
    "\160\001\077\065\077\067\077\071\077\073\100" +
    "\101\160\001\100\103\076\065\076\067\076\071" +
    "\076\073\074\251\077\101\160\001\077\103\075" +
    "\065\075\067\075\071\075\073\076\101\160\001" +
    "\076\103\160\001\044\114\044\211\044\114\160" +
    "\001\075\101\160\001\075\103\074\065\074\067" +
    "\074\071\074\073\044\114\044\114\044\114\160" +
    "\001\160\001\044\114\044\114\160\001\074\101" +
    "\160\001\074\103\044\114\044\114\123\072\160" +
    "\001\044\114\044\114\044\114\044\114\040\124" +
    "\040\124\040\124\160\001\160\001\123\163\123" +
    "\165\123\167\155\104\160\001\155\104\040\124" +
    "\040\124\040\124\160\001\160\001\040\124\040" +
    "\124\160\001\155\104\155\104\155\104\040\124" +
    "\040\124\155\104\155\104\040\124\040\124\040" +
    "\124\040\124\155\104\155\104\122\070\160\001" +
    "\155\104\155\104\155\104\155\104\147\100\160" +
    "\001\147\100\160\001\160\001\122\163\122\070" +
    "\122\070\141\102\160\001\141\102\147\100\147" +
    "\100\147\100\160\001\160\001\147\100\147\100" +
    "\160\001\141\102\141\102\141\102\147\100\147" +
    "\100\141\102\141\102\147\100\147\100\147\100" +
    "\147\100\141\102\141\102\121\066\160\001\141" +
    "\102\141\102\141\102\141\102\130\110\160\001" +
    "\130\110\160\001\160\001\121\066\121\066\121" +
    "\066\127\106\160\001\127\106\130\110\130\110" +
    "\130\110\160\001\160\001\130\110\130\110\160" +
    "\001\127\106\127\106\127\106\130\110\130\110" +
    "\127\106\127\106\130\110\130\110\130\110\130" +
    "\110\127\106\127\106\110\074\160\001\127\106" +
    "\127\106\127\106\127\106\111\112\160\001\111" +
    "\112\160\001\160\001\110\074\110\074\110\074" +
    "\041\116\160\001\041\116\111\112\111\112\111" +
    "\112\160\001\160\001\111\112\111\112\160\001" +
    "\041\116\041\116\041\116\111\112\111\112\041" +
    "\116\041\116\111\112\111\112\111\112\111\112" +
    "\041\116\041\116\063\076\160\001\041\116\041" +
    "\116\041\116\041\116\033\122\160\001\033\122" +
    "\160\001\160\001\063\076\063\076\063\076\032" +
    "\120\160\001\032\120\033\122\033\122\033\122" +
    "\160\001\160\001\033\122\033\122\160\001\032" +
    "\120\032\120\032\120\033\122\033\122\032\120" +
    "\032\120\033\122\033\122\033\122\033\122\032" +
    "\120\032\120\060\223\050\217\032\120\032\120" +
    "\032\120\032\120\160\001\160\001\134\064\050" +
    "\037\050\041\050\043\050\045\050\047\050\051" +
    "\160\001\060\171\060\173\160\001\134\064\134" +
    "\064\134\064\060\175\060\177\133\062\160\001" +
    "\060\201\060\203\060\205\060\207\134\175\134" +
    "\177\132\056\160\001\160\001\133\062\133\062" +
    "\133\062\131\054\160\001\160\001\160\001\160" +
    "\001\132\056\132\056\132\056\133\175\133\177" +
    "\160\001\131\054\131\054\131\054\126\060\160" +
    "\001\132\175\132\177\125\052\160\001\160\001" +
    "\160\001\131\175\131\177\160\001\126\060\126" +
    "\060\126\060\160\001\125\052\125\052\125\052" +
    "\160\001\024\003\160\001\024\005\126\175\126" +
    "\177\160\001\160\001\125\175\125\177\024\007" +
    "\024\011\023\003\160\001\023\005\022\003\160" +
    "\001\022\005\024\013\024\015\160\001\023\007" +
    "\023\011\160\001\022\007\022\011\021\003\160" +
    "\001\021\005\023\013\023\015\160\001\022\013" +
    "\022\015\160\001\021\007\021\011\020\003\160" +
    "\001\020\005\017\003\160\001\017\005\021\013" +
    "\021\015\160\001\020\007\020\011\160\001\017" +
    "\007\017\011\014\003\160\001\014\005\020\013" +
    "\020\015\160\001\017\013\017\015\160\001\014" +
    "\007\014\011\013\003\160\001\013\005\012\003" +
    "\160\001\012\005\014\013\014\015\160\001\013" +
    "\007\013\011\160\001\012\007\012\011\006\003" +
    "\160\001\006\005\013\013\013\015\160\001\012" +
    "\013\012\015\160\001\006\007\006\011\002\003" +
    "\160\001\002\005\000\003\160\001\000\005\006" +
    "\013\006\015\160\001\002\007\002\011\107\024" +
    "\000\007\000\011\160\001\107\024\160\001\002" +
    "\013\002\015\057\221\000\013\000\015\160\001" +
    "\107\024\107\024\107\024\107\024\107\024\107" +
    "\024\106\022\057\163\057\165\057\167\106\022" +
    "\160\001\105\020\160\001\160\001\160\001\105" +
    "\020\160\001\106\022\106\022\106\022\106\022" +
    "\106\022\106\022\105\020\105\020\105\020\105" +
    "\020\105\020\105\020\070\032\160\001\160\001" +
    "\160\001\070\032\160\001\056\010\160\001\160" +
    "\001\160\001\056\010\160\001\070\032\070\032" +
    "\070\032\070\032\070\032\070\032\056\037\056" +
    "\041\056\043\056\045\056\047\056\051\055\006" +
    "\160\001\160\001\160\001\055\006\160\001\054" +
    "\004\160\001\160\001\160\001\054\004\160\001" +
    "\055\037\055\041\055\043\055\045\055\006\055" +
    "\006\054\037\054\041\054\043\054\004\054\004" +
    "\054\004\053\016\160\001\160\001\160\001\053" +
    "\016\160\001\052\014\160\001\160\001\160\001" +
    "\052\014\160\001\053\016\053\016\053\016\053" +
    "\016\053\016\053\016\052\014\052\014\052\014" +
    "\052\014\052\014\052\014\051\012\160\001\160" +
    "\001\160\001\051\012\160\001\045\030\160\001" +
    "\160\001\160\001\045\030\160\001\051\012\051" +
    "\012\051\012\051\012\051\012\051\012\045\030" +
    "\045\030\045\030\045\030\045\030\045\030\015" +
    "\026\160\001\160\001\160\001\015\026\160\001" +
    "\160\001\160\001\160\001\042\161\160\001\160" +
    "\001\015\026\015\026\015\026\015\026\015\026" +
    "\015\026\043\171\043\173\042\163\042\165\042" +
    "\167\160\001\043\175\043\177\047\215\160\001" +
    "\043\201\043\203\043\205\043\207\046\213\160" +
    "\001\047\037\047\041\047\043\047\045\047\047" +
    "\047\051\046\037\046\041\046\043\046\045\046" +
    "\047\046\051\011\113\160\001\160\001\027\034" +
    "\160\001\160\001\160\001\160\001\011\037\011" +
    "\041\011\043\011\045\011\047\011\051\027\034" +
    "\027\034\027\034\160\001\160\001\160\001\160" +
    "\001\160\001\160\001\160\001\160\001\160\001" +
    "\160\001\160\001\160\001\160\001\160\001\160" +
    "\001\160\001\160\001\160\001\160\001\160\001" +
    "\125\113\056\112\123\043\044\111\055\041\054" +
    "\110\107\106\146\044\105\104\067\010\006\000" +
    "\036\122\043\044\033\121\043\044\063\043\044" +
    "\057\060\044\042\043\044\135\044\134\044\133" +
    "\044\132\044\131\044\130\044\127\044\126\044" +
    "\125\044\053\030\024\001\063\061\057\055\053" +
    "\051\047\045\043\052\051\050\047\046\015\011" +
    "\007\001\001\001\001\001\001\001\012"
    });

  /** Return parse table */
  protected com.github.jhoenicke.javacup.runtime.ParseTable parse_table() {
    return CUP$parse_table;
  }

  /** Instance of action encapsulation class. */
  protected CUP$P4LTLParser$action action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$P4LTLParser$action(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList        stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$P4LTLParser$action {
  private final P4LTLParser parser;

  /** Constructor */
  CUP$P4LTLParser$action(P4LTLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList            CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= texpr EOF 
          case 0:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$rhs$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int CUP$rhsleft = CUP$rhs$.left;
              int CUP$rhsright = CUP$rhs$.right;
              AstNode CUP$rhs = (AstNode) CUP$rhs$.value;
RESULT = CUP$rhs;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, CUP$rhs$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= texpr AND texpr 
          case 1:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.and, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 1, t1$, t2$, RESULT);
            }

          // texpr ::= texpr OR texpr 
          case 2:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.or, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 1, t1$, t2$, RESULT);
            }

          // texpr ::= texpr IMPLIES texpr 
          case 3:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.implies, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 1, t1$, t2$, RESULT);
            }

          // texpr ::= texpr UNTIL texpr 
          case 4:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.until, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 1, t1$, t2$, RESULT);
            }

          // texpr ::= texpr WEAKUNTIL texpr 
          case 5:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.weakuntil, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 1, t1$, t2$, RESULT);
            }

          // texpr ::= texpr RELEASE texpr 
          case 6:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryTemporalOperator(BinaryTemporalType.release, t1, t2); 
              return parser.getSymbolFactory().newSymbol("texpr", 1, t1$, t2$, RESULT);
            }

          // texpr ::= ALWAYS LPAR texpr RPAR 
          case 7:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
 RESULT = new UnaryTemporalOperator(UnaryTemporalType.always, t); 
              return parser.getSymbolFactory().newSymbol("texpr", 1, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= EVENTUALLY LPAR texpr RPAR 
          case 8:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
 RESULT = new UnaryTemporalOperator(UnaryTemporalType.eventually, t); 
              return parser.getSymbolFactory().newSymbol("texpr", 1, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= NEXT LPAR texpr RPAR 
          case 9:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
 RESULT = new UnaryTemporalOperator(UnaryTemporalType.next, t); 
              return parser.getSymbolFactory().newSymbol("texpr", 1, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= NEG texpr 
          case 10:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
 RESULT = new UnaryTemporalOperator(UnaryTemporalType.neg, t); 
              return parser.getSymbolFactory().newSymbol("texpr", 1, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2)), t$, RESULT);
            }

          // texpr ::= LPAR texpr RPAR 
          case 11:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
 RESULT = t; 
              return parser.getSymbolFactory().newSymbol("texpr", 1, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // texpr ::= AP LPAR predicate RPAR 
          case 12:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol p$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int pleft = p$.left;
              int pright = p$.right;
              AstNode p = (AstNode) p$.value;
 RESULT = new P4LTLAtomicProposition(p); 
              return parser.getSymbolFactory().newSymbol("texpr", 1, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // predicate ::= DROP 
          case 13:
            {
              AstNode RESULT;
 RESULT = new Drop(); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              return parser.getSymbolFactory().newSymbol("predicate", 2, CUP$sym, CUP$sym, RESULT);
            }

          // predicate ::= FWD LPAR NAME RPAR 
          case 14:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int nleft = n$.left;
              int nright = n$.right;
              String n = (String) n$.value;
 RESULT = new Forward(n); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // predicate ::= FWD LPAR INT RPAR 
          case 15:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol i$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int ileft = i$.left;
              int iright = i$.right;
              BigInteger i = (BigInteger) i$.value;
 RESULT = new Forward(i); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // predicate ::= APPLY LPAR NAME RPAR 
          case 16:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int nleft = n$.left;
              int nright = n$.right;
              String n = (String) n$.value;
 RESULT = new Apply(n); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // predicate ::= APPLY LPAR NAME COMMA NAME RPAR 
          case 17:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int n2left = n2$.left;
              int n2right = n2$.right;
              String n2 = (String) n2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol n1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int n1left = n1$.left;
              int n1right = n1$.right;
              String n1 = (String) n1$.value;
 RESULT = new Apply(n1, n2); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 6)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // predicate ::= VALID LPAR NAME RPAR 
          case 18:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int nleft = n$.left;
              int nright = n$.right;
              String n = (String) n$.value;
 RESULT = new Valid(n); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // predicate ::= IPMASK LPAR NAME COMMA IP COMMA INT RPAR 
          case 19:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol i$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int ileft = i$.left;
              int iright = i$.right;
              BigInteger i = (BigInteger) i$.value;
              com.github.jhoenicke.javacup.runtime.Symbol ip$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int ipleft = ip$.left;
              int ipright = ip$.right;
              String ip = (String) ip$.value;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 6));
              int nleft = n$.left;
              int nright = n$.right;
              String n = (String) n$.value;
 RESULT = new IPMask(n, ip, i); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 8)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // predicate ::= term EQ term 
          case 20:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.eq, t1, t2); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, t1$, t2$, RESULT);
            }

          // predicate ::= term GT term 
          case 21:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.gt, t1, t2); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, t1$, t2$, RESULT);
            }

          // predicate ::= term GEQ term 
          case 22:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.geq, t1, t2); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, t1$, t2$, RESULT);
            }

          // predicate ::= term NEQ term 
          case 23:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.neq, t1, t2); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, t1$, t2$, RESULT);
            }

          // predicate ::= term LT term 
          case 24:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.lt, t1, t2); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, t1$, t2$, RESULT);
            }

          // predicate ::= term LEQ term 
          case 25:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new ExtendedComparativeOperator(ExtendedComparativeType.leq, t1, t2); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, t1$, t2$, RESULT);
            }

          // predicate ::= predicate AND predicate 
          case 26:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol p2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int p2left = p2$.left;
              int p2right = p2$.right;
              AstNode p2 = (AstNode) p2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol p1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int p1left = p1$.left;
              int p1right = p1$.right;
              AstNode p1 = (AstNode) p1$.value;
 RESULT = new BinaryOperator(BinaryType.and, p1, p2); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, p1$, p2$, RESULT);
            }

          // predicate ::= predicate OR predicate 
          case 27:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol p2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int p2left = p2$.left;
              int p2right = p2$.right;
              AstNode p2 = (AstNode) p2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol p1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int p1left = p1$.left;
              int p1right = p1$.right;
              AstNode p1 = (AstNode) p1$.value;
 RESULT = new BinaryOperator(BinaryType.or, p1, p2); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, p1$, p2$, RESULT);
            }

          // predicate ::= predicate IMPLIES predicate 
          case 28:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol p2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int p2left = p2$.left;
              int p2right = p2$.right;
              AstNode p2 = (AstNode) p2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol p1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int p1left = p1$.left;
              int p1right = p1$.right;
              AstNode p1 = (AstNode) p1$.value;
 RESULT = new BinaryOperator(BinaryType.implies, p1, p2); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, p1$, p2$, RESULT);
            }

          // predicate ::= LPAR predicate RPAR 
          case 29:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol p$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int pleft = p$.left;
              int pright = p$.right;
              AstNode p = (AstNode) p$.value;
 RESULT = p; 
              return parser.getSymbolFactory().newSymbol("predicate", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // predicate ::= NEG predicate 
          case 30:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol p$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int pleft = p$.left;
              int pright = p$.right;
              AstNode p = (AstNode) p$.value;
 RESULT = new Not(p); 
              return parser.getSymbolFactory().newSymbol("predicate", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2)), p$, RESULT);
            }

          // term ::= name LBRACKET term RBRACKET 
          case 31:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int nleft = n$.left;
              int nright = n$.right;
              AstNode n = (AstNode) n$.value;
 RESULT = new ArrayAccessExpr(n,t); 
              return parser.getSymbolFactory().newSymbol("term", 3, n$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // term ::= OLD LPAR NAME RPAR 
          case 32:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int nleft = n$.left;
              int nright = n$.right;
              String n = (String) n$.value;
 RESULT = new OldExpression(n); 
              return parser.getSymbolFactory().newSymbol("term", 3, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // term ::= KEY LPAR NAME COMMA NAME RPAR 
          case 33:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol key$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int keyleft = key$.left;
              int keyright = key$.right;
              String key = (String) key$.value;
              com.github.jhoenicke.javacup.runtime.Symbol table$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int tableleft = table$.left;
              int tableright = table$.right;
              String table = (String) table$.value;
 RESULT = new Key(table, key); 
              return parser.getSymbolFactory().newSymbol("term", 3, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 6)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // term ::= term PLUS term 
          case 34:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryOperator(BinaryType.plus, t1, t2); 
              return parser.getSymbolFactory().newSymbol("term", 3, t1$, t2$, RESULT);
            }

          // term ::= term MINUS term 
          case 35:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t2$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int t2left = t2$.left;
              int t2right = t2$.right;
              AstNode t2 = (AstNode) t2$.value;
              com.github.jhoenicke.javacup.runtime.Symbol t1$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3));
              int t1left = t1$.left;
              int t1right = t1$.right;
              AstNode t1 = (AstNode) t1$.value;
 RESULT = new BinaryOperator(BinaryType.minus, t1, t2); 
              return parser.getSymbolFactory().newSymbol("term", 3, t1$, t2$, RESULT);
            }

          // term ::= LPAR term RPAR 
          case 36:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol t$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int tleft = t$.left;
              int tright = t$.right;
              AstNode t = (AstNode) t$.value;
 RESULT = t; 
              return parser.getSymbolFactory().newSymbol("term", 3, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // term ::= name 
          case 37:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int nleft = n$.left;
              int nright = n$.right;
              AstNode n = (AstNode) n$.value;
 RESULT = n; 
              return parser.getSymbolFactory().newSymbol("term", 3, n$, n$, RESULT);
            }

          // term ::= INT 
          case 38:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol i$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int ileft = i$.left;
              int iright = i$.right;
              BigInteger i = (BigInteger) i$.value;
 RESULT = new BigIntegerLiteral(i); 
              return parser.getSymbolFactory().newSymbol("term", 3, i$, i$, RESULT);
            }

          // term ::= TRUE 
          case 39:
            {
              AstNode RESULT;
 RESULT = new BoolLiteral(true); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              return parser.getSymbolFactory().newSymbol("term", 3, CUP$sym, CUP$sym, RESULT);
            }

          // term ::= FALSE 
          case 40:
            {
              AstNode RESULT;
 RESULT = new BoolLiteral(false); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              return parser.getSymbolFactory().newSymbol("term", 3, CUP$sym, CUP$sym, RESULT);
            }

          // name ::= NAME 
          case 41:
            {
              AstNode RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol m$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int mleft = m$.left;
              int mright = m$.right;
              String m = (String) m$.value;
 RESULT = new Name(m); 
              return parser.getSymbolFactory().newSymbol("name", 4, m$, m$, RESULT);
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

